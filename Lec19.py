# Working with 2-dimensional array or matrices
import numpy as np
A = np.array([[1,2,3],[-4,2,7],[9,10,11]])

print(A.size)

print(A.shape)

import random

a = np.array([random.randint(1,100) for i in np.arange(20)])
print(a)

M = a.reshape(4,5)
print(M)
print(M.T) # Transpose of M

N = M.transpose()
print(N)

print(M*M)

print(M.dot(N))

print(M@N)

D = M.dot(N)
print(D)

from numpy import linalg as la
print(la.det(D))
D1=la.inv(D)
print(D1)
print(la.matrix_rank(D))
print(D.trace())
print(D)
print(D.flatten())
print(D.dot(D1))

Output:
9
(3, 3)
[ 3 51 68 93 46 22 30 88 31 74 68 87 24 75 70 60 64 83 29 60]
[[ 3 51 68 93 46]
 [22 30 88 31 74]
 [68 87 24 75 70]
 [60 64 83 29 60]]
[[ 3 22 68 60]
 [51 30 87 64]
 [68 88 24 83]
 [93 31 75 29]
 [46 74 70 60]]
[[ 3 22 68 60]
 [51 30 87 64]
 [68 88 24 83]
 [93 31 75 29]
 [46 74 70 60]]
[[   9 2601 4624 8649 2116]
 [ 484  900 7744  961 5476]
 [4624 7569  576 5625 4900]
 [3600 4096 6889  841 3600]]
[[17999 13867 16468 14545]
 [13867 15565 13723 15883]
 [16468 13723 23294 18015]
 [14545 15883 18015 19026]]
[[17999 13867 16468 14545]
 [13867 15565 13723 15883]
 [16468 13723 23294 18015]
 [14545 15883 18015 19026]]
[[17999 13867 16468 14545]
 [13867 15565 13723 15883]
 [16468 13723 23294 18015]
 [14545 15883 18015 19026]]
750828955352041.6
[[ 0.00032049 -0.00036246 -0.00021503  0.00026118]
 [-0.00036246  0.000903    0.00034725 -0.00080553]
 [-0.00021503  0.00034725  0.00032659 -0.00043473]
 [ 0.00026118 -0.00080553 -0.00043473  0.00093698]]
4
75884
[[17999 13867 16468 14545]
 [13867 15565 13723 15883]
 [16468 13723 23294 18015]
 [14545 15883 18015 19026]]
[17999 13867 16468 14545 13867 15565 13723 15883 16468 13723 23294 18015
 14545 15883 18015 19026]
[[ 1.00000000e+00  7.14922913e-16 -7.95967025e-16  3.33175328e-16]
 [ 3.67924007e-16  1.00000000e+00 -1.06300602e-15  1.89030649e-15]
 [ 5.12990258e-16  1.18286457e-15  1.00000000e+00  3.38162658e-16]
 [-2.82651506e-16  7.46364776e-16  3.84783351e-16  1.00000000e+00]]
